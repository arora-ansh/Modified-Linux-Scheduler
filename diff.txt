diff -ruN linux3/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl linux4/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux3/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-27 13:00:09.125164858 -0700
+++ linux4/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-11-09 14:43:13.711767973 -0800
@@ -362,6 +362,7 @@
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
 440 common  sh_task_info    sys_sh_task_info
+441 common 	rtnice			sys_rtnice
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
Binary files linux3/linux-5.9.1/certs/signing_key.x509 and linux4/linux-5.9.1/certs/signing_key.x509 differ
diff -ruN linux3/linux-5.9.1/include/linux/sched.h linux4/linux-5.9.1/include/linux/sched.h
--- linux3/linux-5.9.1/include/linux/sched.h	2020-10-16 23:31:22.000000000 -0700
+++ linux4/linux-5.9.1/include/linux/sched.h	2020-11-10 22:19:17.666919549 -0800
@@ -460,6 +460,7 @@
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
+	u64 			rt_val;
 
 	struct sched_statistics		statistics;
 
diff -ruN linux3/linux-5.9.1/kernel/sched/core.c linux4/linux-5.9.1/kernel/sched/core.c
--- linux3/linux-5.9.1/kernel/sched/core.c	2020-10-16 23:31:22.000000000 -0700
+++ linux4/linux-5.9.1/kernel/sched/core.c	2020-11-10 22:16:56.083024806 -0800
@@ -3070,6 +3070,7 @@
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.rt_val 			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -ruN linux3/linux-5.9.1/kernel/sched/fair.c linux4/linux-5.9.1/kernel/sched/fair.c
--- linux3/linux-5.9.1/kernel/sched/fair.c	2020-10-16 23:31:22.000000000 -0700
+++ linux4/linux-5.9.1/kernel/sched/fair.c	2020-11-12 01:58:19.030370095 -0800
@@ -534,6 +534,26 @@
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
+	if(a->rt_val>0 || b->rt_val>0) {
+		if(a->rt_val > 0 && b->rt_val > 0){
+			//In case both process have rt_vals, the one with lower value will be placed on left in the RB Tree (since higher on priority)
+			//This is done by returning value of 0 if b is having a lower rt_val, and a value of 1 if a is having a lower rt_val
+			if(a->rt_val >= b->rt_val){
+				return 0;
+			}
+			else{
+				return 1;
+			}
+		}
+		//In case if only one of the two processes has an assigned rt_val, they will be given higher priority and hence placed on left on the RB Tree, regardless of the other process's vruntime
+		else if(a->rt_val > 0){
+			return 1;
+		}
+		else if(b->rt_val > 0){
+			return 0;
+		}
+	}
+	//Normal functioning if no two processes has real time soft value given
 	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
@@ -844,6 +864,7 @@
 	struct sched_entity *curr = cfs_rq->curr;
 	u64 now = rq_clock_task(rq_of(cfs_rq));
 	u64 delta_exec;
+	u64 cur_rt_val;
 
 	if (unlikely(!curr))
 		return;
@@ -860,8 +881,23 @@
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
-	curr->vruntime += calc_delta_fair(delta_exec, curr);
-	update_min_vruntime(cfs_rq);
+	//curr->vruntime += calc_delta_fair(delta_exec, curr);
+	//update_min_vruntime(cfs_rq);
+	
+	cur_rt_val = curr->rt_val;
+	if(cur_rt_val==0){
+		curr->vruntime += calc_delta_fair(delta_exec, curr);
+		update_min_vruntime(cfs_rq);
+	}
+	// Just as in the case of vruntime, we operate on our s_val with delta_exec value. curr stores scheduler entity of the process in operation
+	else{
+		if(delta_exec <= cur_rt_val){
+			curr->rt_val = cur_rt_val - delta_exec;
+		}
+		else{
+			curr->rt_val = 0;
+		}
+	}
 
 	if (entity_is_task(curr)) {
 		struct task_struct *curtask = task_of(curr);
diff -ruN linux3/linux-5.9.1/Makefile linux4/linux-5.9.1/Makefile
--- linux3/linux-5.9.1/Makefile	2020-10-27 12:57:13.449981474 -0700
+++ linux4/linux-5.9.1/Makefile	2020-11-09 14:38:10.538349002 -0800
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/ rtnice/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux3/linux-5.9.1/rtnice/Makefile linux4/linux-5.9.1/rtnice/Makefile
--- linux3/linux-5.9.1/rtnice/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ linux4/linux-5.9.1/rtnice/Makefile	2020-11-09 14:35:38.107727647 -0800
@@ -0,0 +1 @@
+obj-y := rtnice.o
\ No newline at end of file
diff -ruN linux3/linux-5.9.1/rtnice/rtnice.c linux4/linux-5.9.1/rtnice/rtnice.c
--- linux3/linux-5.9.1/rtnice/rtnice.c	1969-12-31 16:00:00.000000000 -0800
+++ linux4/linux-5.9.1/rtnice/rtnice.c	2020-11-10 22:26:28.780166034 -0800
@@ -0,0 +1,41 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/syscalls.h>
+#include <linux/printk.h>
+#include <linux/module.h>
+#include <asm/uaccess.h>
+#include <linux/fs.h> 
+#include <linux/cdev.h>
+#include <linux/proc_fs.h>
+#include <linux/pid.h>
+#include <linux/pid_namespace.h>
+#include <linux/sched.h>
+#include <linux/string.h>
+#include <linux/errno.h>
+#include <linux/uaccess.h>
+#include <linux/mm.h>
+
+SYSCALL_DEFINE2(rtnice,int,pid,long,rt_val){
+
+	struct pid *pid_struct = NULL;
+	struct task_struct *process;
+	unsigned long long s_val;
+	
+	if(rt_val<0 || pid<0){
+		return -EINVAL;
+	}	
+	
+	s_val = rt_val*1000000000;
+
+	pid_struct = find_get_pid(pid);
+	if(pid_struct==NULL){
+		return -ESRCH;
+	}
+	process = pid_task(pid_struct,PIDTYPE_PID);
+
+	process->se.rt_val = s_val;
+	printk(KERN_ALERT "Value of real time req of PID: %d changed to %llu succesfully\n",pid,process->se.rt_val);
+
+	return 0;
+
+}
Binary files linux3/linux-5.9.1/tools/objtool/objtool and linux4/linux-5.9.1/tools/objtool/objtool differ